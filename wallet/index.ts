// 91
import { Transaction } from './transaction';

// 78

import { ChainUtil } from '../misc/chain-util';
import { INITIAL_BALANCE } from '../misc/config-constants';
import { Blockchain } from '../blockchain';
import { TransactionPool } from './transaction-pool';

class Wallet {
    balance: any;
    keyPair: any;
    publicKey: any;
    address!: string;
    amount!: number;
    
    /**
    * the wallet will hold the public key
    * and the private key pair
    * and the balance
    */
    constructor() {
        this.balance = INITIAL_BALANCE;
        this.keyPair = ChainUtil.genKeyPair();
        this.publicKey = this.keyPair.getPublic().encode('hex');
        this.amount = 0;
    }

    toString() {
        return `Wallet - publicKey: ${this.publicKey.toString()} balance : ${this.balance}`
    }

    sign(dataHash: any) {
        return this.keyPair.sign(dataHash);
    }

    createTransaction(recipient: any, amount: number, blockchain: Blockchain, transactionPool: TransactionPool) {
        this.balance = this.calculateBalance(blockchain); // 145
        if (amount > this.balance) {
            console.log(`Amount: ${amount} exceeds the current balance: ${this.balance}`);
            return;
        }
        let transaction = transactionPool.existingTransaction(this.publicKey);
        if (transaction) {
            // creates more outputs
            transaction.update(this, recipient, amount)
        } else {
            // creates a new transaction and updates the transaction pool
            transaction = Transaction.newTransaction(this, recipient, amount);
            transactionPool.updateOrAddTransaction(transaction);
        }
        return transaction;
    }

    // 133
    static blockchainWallet() {
        const blockchainWallet = new this();
        blockchainWallet.address = 'blockchain-wallet';
        return blockchainWallet;
    }

    // 143
    /**
    * updates the balance of the wallet
    * based on the latest transaction
    */
    calculateBalance(blockchain: Blockchain) {
        // store the existing balance
        let balance = this.balance;
        // create an array of transactions
        let transactions: any[] = [];
        // store all the transactions in the array
        blockchain.chain.forEach((block: { data: any[]; }) => block.data.forEach((transaction: any) => {
            transactions.push(transaction);
        }));
        // get all the transactions generated by the wallet ie money sent by the wallet
        const walletInputTransactions = transactions.filter(transaction =>
            transaction.input.address === this.publicKey);
        // declare a variable to save the timestamp
        let startTime = 0;
        if (walletInputTransactions.length > 0) {
            // get the latest transaction
            const recentInputTransaction =
                walletInputTransactions.reduce((prev, current) => prev.input.timestamp
                    > current.input.timestamp ? prev : current);
            // get the outputs of that transactions, its amount will be the money that we would get back
            balance = recentInputTransaction.outputs.find((output: { address: any; }) =>
                output.address === this.publicKey).amount
            // save the timestamp of the latest transaction made by the wallet
            startTime = recentInputTransaction.input.timestamp
        }
        // get the transactions that were addressed to this wallet ie somebody sent some money
        // and add its outputs.
        // since we save the timestamp we would only add the outputs of the transactions received
        // only after the latest transactions made by us
        transactions.forEach(transaction => {
            if (transaction.input.timestamp > startTime) {
                transaction.outputs.find((output: { address: any; amount: any; }) => {
                    if (output.address === this.publicKey) {
                        balance += output.amount;
                    }
                })
            }
        })
        return balance;
    }

}

export { Wallet };
